{"version":3,"sources":["reportWebVitals.js","context/auth.js","util/AuthRoute.js","components/Menu.js","components/LikeButton.js","util/graphql.js","components/DeleteButton.js","components/PostCard.js","util/hooks.js","components/PostForm.js","pages/Home.js","pages/Register.js","pages/Login.js","pages/SinglePost.js","App.js","ApolloProvider.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","user","localStorage","getItem","decodedToken","jwtDecode","exp","Date","now","removeItem","AuthContext","createContext","login","userData","logout","authReducer","state","action","type","payload","AuthProvider","props","useReducer","dispatch","Provider","value","setItem","token","AuthRoute","Component","component","rest","useContext","render","to","MenuBar","pathname","window","location","path","substr","useState","activeItem","setActiveItem","handleItemClick","e","name","Menu","pointing","secondary","size","color","Item","username","active","as","Link","position","onClick","LIKE_POST_MUTATION","gql","LikeButton","post","id","likeCount","likes","liked","setLiked","useEffect","find","like","useMutation","variables","postId","onError","err","console","log","likePost","likeButton","Button","Icon","basic","labelPosition","Label","FETCH_POST_QUERY","DELETE_POST_MUTATION","DELETE_COMMENT_MUTATION","DeleteButton","commentId","callback","confirmOpen","setConfirmOpen","mutation","update","proxy","data","readQuery","query","newData","getPosts","filter","p","writeQuery","deletePostOrMutation","Popup","content","inverted","trigger","style","margin","Confirm","open","onCancel","onConfirm","PostCard","body","createdAt","commentCount","Card","fluid","Content","Image","floated","src","Header","Meta","moment","fromNow","Description","extra","useForm","values","setValues","onChange","target","onSubmit","preventDefault","PostForm","createPost","CREATE_POST_MUTATION","result","error","Form","Field","Input","placeholder","className","marginBottom","graphQLErrors","message","Home","useQuery","loading","posts","setPosts","Grid","columns","Row","Column","Transition","Group","map","REGISTER_USER","Register","context","errors","setErrors","addUser","email","password","confirmPassword","_","register","history","push","extensions","exception","noValidate","label","Object","keys","length","LOGIN_USER","Login","loginUser","class","SUBMIT_COMMENT_MUTATION","SinglePost","singlePost","match","params","commentInputRef","useRef","comment","setComment","getPost","current","blur","submitComment","comments","GridColumn","width","event","ref","disabled","trim","App","Container","exact","httpLink","createHttpLink","uri","authLink","setContext","headers","Authorization","client","ApolloClient","link","concat","cache","InMemoryCache","ReactDOM","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.7b3afcbe.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, {useReducer, createContext} from 'react'\r\nimport jwtDecode from 'jwt-decode'\r\n\r\nconst initialState = {\r\n    user: null\r\n}\r\n\r\nif(localStorage.getItem('jwtToken')){\r\n    const decodedToken = jwtDecode(localStorage.getItem('jwtToken'))\r\n\r\n    if(decodedToken.exp * 1000 < Date.now()) {\r\n        localStorage.removeItem('jwtToken')\r\n    } else {\r\n        initialState.user = decodedToken\r\n    }\r\n}\r\n\r\nconst AuthContext = createContext({\r\n    user: null,\r\n    login: (userData) => {},\r\n    logout: () => {}\r\n})\r\n\r\nfunction authReducer(state, action){\r\n    switch(action.type){\r\n        case 'LOGIN':\r\n            return{\r\n                ...state,\r\n                user: action.payload\r\n            }\r\n        case 'LOGOUT':\r\n            return{\r\n                ...state,\r\n                user: null\r\n            }\r\n        default: \r\n            return state\r\n    }\r\n}\r\n\r\nfunction AuthProvider(props){\r\n    const [state, dispatch] = useReducer(authReducer, initialState)\r\n\r\n    function login(userData){\r\n        localStorage.setItem(\"jwtToken\", userData.token)\r\n        dispatch({\r\n            type: 'LOGIN',\r\n            payload: userData\r\n        })\r\n    }\r\n\r\n    function logout(){\r\n        dispatch({type: 'LOGOUT'})\r\n        localStorage.removeItem(\"jwtToken\")\r\n    }\r\n\r\n    return (\r\n        <AuthContext.Provider\r\n            value={{user: state.user, login, logout}}\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n\r\nexport {AuthContext, AuthProvider}","import React, {useContext} from 'react'\r\nimport {Route, Redirect} from 'react-router-dom'\r\nimport {AuthContext} from '../context/auth'\r\n\r\nfunction AuthRoute({ component: Component, ...rest}) {\r\n    const {user} = useContext(AuthContext)\r\n\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={props => \r\n                user ? <Redirect to=\"/\"/> : <Component {...props}/>\r\n            }\r\n        />\r\n    )\r\n}\r\n\r\nexport default AuthRoute","import React, { useContext, useState } from 'react'\r\nimport { Menu, Segment } from 'semantic-ui-react'\r\nimport {Link} from 'react-router-dom'\r\n\r\nimport {AuthContext} from '../context/auth'\r\n\r\nfunction MenuBar() {\r\n\r\n  const { user, logout } = useContext(AuthContext)\r\n\r\n  const pathname = window.location.pathname\r\n  const path = pathname === '/' ? 'home' : pathname.substr(1)\r\n\r\n  const [activeItem, setActiveItem] = useState(path)\r\n\r\n  const handleItemClick = (e, { name }) => setActiveItem(name)\r\n\r\n  const menuBar = user ? (\r\n    <Menu pointing secondary size=\"massive\" color=\"teal\">\r\n      <Menu.Item\r\n        name={user.username}\r\n        active\r\n        as={Link}\r\n        to=\"/\"\r\n      />\r\n      <Menu.Menu position='right'>\r\n        <Menu.Item\r\n          name='logout'\r\n          onClick={logout}\r\n        />\r\n      </Menu.Menu>\r\n    </Menu>\r\n  ) : (\r\n    <Menu pointing secondary size=\"massive\" color=\"teal\">\r\n    <Menu.Item\r\n      name='home'\r\n      active={activeItem === 'home'}\r\n      onClick={handleItemClick}\r\n      as={Link}\r\n      to=\"/\"\r\n    />\r\n    <Menu.Menu position='right'>\r\n      <Menu.Item\r\n        name='login'\r\n        active={activeItem === 'login'}\r\n        onClick={handleItemClick}\r\n        as={Link}\r\n        to=\"/login\"\r\n      />\r\n      <Menu.Item\r\n        name='register'\r\n        active={activeItem === 'register'}\r\n        onClick={handleItemClick}\r\n        as={Link}\r\n        to=\"/register\"\r\n      />\r\n    </Menu.Menu>\r\n  </Menu>\r\n  )\r\n\r\n  return menuBar\r\n}\r\n\r\nexport default MenuBar","import React, {useEffect, useState} from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport {gql, useMutation} from '@apollo/client'\r\nimport {Card, Image, Button, Label, Icon} from 'semantic-ui-react'\r\n\r\n\r\nfunction LikeButton({user, post: {id, likeCount, likes}}) {\r\n    const [liked, setLiked] = useState(false)\r\n    useEffect(() => {\r\n        if(user && likes.find(like => like.username === user.username)){\r\n            setLiked(true)\r\n        } else setLiked(false)\r\n    }, [user, likes])\r\n\r\n    const [likePost] = useMutation(LIKE_POST_MUTATION, {\r\n        variables: {postId: id},\r\n        onError(err) {\r\n            console.log(err);\r\n        }\r\n    })\r\n\r\n    const likeButton = user ? (\r\n        liked? (\r\n            <Button color='red'>\r\n                <Icon name='heart' />\r\n            </Button>\r\n        ) : (\r\n            <Button color='red' basic>\r\n                <Icon name='heart' />\r\n            </Button>\r\n        )\r\n    ) : (\r\n        <Button as={Link} to=\"/login\" color='red' basic>\r\n            <Icon name='heart' />\r\n        </Button>\r\n    )\r\n\r\n    return (\r\n        <Button as='div' labelPosition='right' onClick={likePost}>\r\n            {likeButton}\r\n        <Label as='a' basic color='red' pointing='left'>\r\n            {likeCount}\r\n        </Label>\r\n        </Button>\r\n    )\r\n}\r\n\r\nconst LIKE_POST_MUTATION = gql`\r\n    mutation likePost($postId: ID!){\r\n        likePost(postId: $postId){\r\n            id\r\n            likes{\r\n                id username\r\n            }\r\n            likeCount\r\n        }\r\n    }\r\n`\r\n\r\nexport default LikeButton","import { gql} from '@apollo/client'\r\n\r\nexport const FETCH_POST_QUERY = gql`\r\n    {\r\n        getPosts{\r\n        id \r\n        body \r\n        createdAt \r\n        username \r\n        likeCount \r\n        likes{\r\n            username\r\n        }\r\n        commentCount\r\n        comments{id username createdAt body}\r\n    }\r\n    }\r\n`","import React, {useState} from 'react'\r\nimport {gql, useMutation } from '@apollo/client'\r\n\r\nimport {Button, Confirm, Icon, Popup} from 'semantic-ui-react'\r\n\r\nimport {FETCH_POST_QUERY} from '../util/graphql'\r\n\r\nfunction DeleteButton({postId, commentId, callback}) {\r\n    const [confirmOpen, setConfirmOpen] = useState(false)  \r\n\r\n    const mutation = commentId ? DELETE_COMMENT_MUTATION : DELETE_POST_MUTATION\r\n\r\n    const [deletePostOrMutation] = useMutation(mutation, {\r\n        update(proxy){\r\n            setConfirmOpen(false)\r\n            if(!commentId){\r\n                const data = proxy.readQuery({\r\n                    query: FETCH_POST_QUERY\r\n                })\r\n                const newData = data.getPosts.filter(p => p.id !== postId)\r\n                proxy.writeQuery({query: FETCH_POST_QUERY, data: {\r\n                    ...data,\r\n                    getPosts: {\r\n                      newData,\r\n                    },\r\n                  },\r\n                })\r\n            }\r\n\r\n            if(callback) callback()\r\n        },\r\n        variables: {\r\n            postId,\r\n            commentId\r\n        }\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <Popup\r\n                content={commentId? 'Delete comment' : 'Delete post'}\r\n                inverted\r\n                trigger={\r\n                    <Button as=\"div\" color=\"red\" onClick={() => setConfirmOpen(true)}>\r\n                    <Icon name=\"trash\" style={{margin: 0}}/>\r\n                    </Button>\r\n                }\r\n            /> \r\n            <Confirm \r\n                open={confirmOpen}\r\n                onCancel={()=> setConfirmOpen(false)}\r\n                onConfirm={deletePostOrMutation}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nconst DELETE_POST_MUTATION = gql`\r\n    mutation deletePost($postId: ID!){\r\n        deletePost(postId: $postId)\r\n    }\r\n`\r\n\r\nconst DELETE_COMMENT_MUTATION = gql`\r\n    mutation deleteComment($postId: ID!, $commentId: ID!){\r\n        deleteComment(postId: $postId, commentId: $commentId){\r\n            id\r\n            comments{\r\n                id username createdAt body\r\n            }\r\n            commentCount\r\n        }\r\n    }\r\n`\r\n\r\n\r\nexport default DeleteButton\r\n","import React, {useContext} from 'react'\r\nimport {Card, Image, Button, Label, Icon, Popup} from 'semantic-ui-react'\r\nimport {Link} from 'react-router-dom'\r\nimport moment from 'moment'\r\nimport LikeButton from './LikeButton'\r\nimport DeleteButton from './DeleteButton'\r\nimport {AuthContext} from '../context/auth'\r\n\r\nfunction PostCard({post: {body, createdAt, id, username, likeCount, commentCount, likes}}) {\r\n    const { user } = useContext(AuthContext)\r\n\r\n\r\n    return (\r\n        <Card fluid>\r\n        <Card.Content>\r\n          <Image\r\n            floated='right'\r\n            size='mini'\r\n            src='https://react.semantic-ui.com/images/avatar/large/molly.png'\r\n          />\r\n          <Card.Header>{username}</Card.Header>\r\n          <Card.Meta as={Link} to={`/posts/${id}`}>{moment(createdAt).fromNow(true)}</Card.Meta>\r\n          <Card.Description>\r\n            {body}\r\n          </Card.Description>\r\n        </Card.Content>\r\n        <Card.Content extra>\r\n            <LikeButton user={user} post={{id, likes, likeCount}}/>\r\n            <Popup\r\n              content=\"Comment on post\"\r\n              inverted\r\n              trigger={\r\n                <Button labelPosition='right' as={Link} to={`/posts/${id}`}>\r\n                <Button color='blue'>\r\n                    <Icon name='comments' />\r\n                    Comments\r\n                </Button>\r\n                <Label as='a' basic color='blue' pointing='left'>\r\n                    {commentCount}\r\n                </Label>\r\n                </Button>\r\n              }\r\n            >\r\n            </Popup>\r\n\r\n            {user && user.username === username && (\r\n              <DeleteButton postId={id} />\r\n            )}\r\n        </Card.Content>\r\n      </Card>\r\n    )\r\n}\r\nexport default PostCard","import React, {useState} from 'react'\r\n\r\nexport const useForm = (callback, initialState = {}) => {\r\n\r\n    const [values, setValues] = useState(initialState)\r\n\r\n    const onChange = (e) => setValues({...values, [e.target.name]: e.target.value});\r\n\r\n    const onSubmit = e => {\r\n        e.preventDefault()\r\n        callback()\r\n    }\r\n\r\n    return {\r\n        onChange,\r\n        onSubmit,\r\n        values\r\n    }\r\n} ","import React from 'react'\r\nimport {Button, Form} from 'semantic-ui-react'\r\nimport {useForm} from '../util/hooks'\r\nimport {gql, useMutation} from '@apollo/client'\r\nimport {FETCH_POST_QUERY} from '../util/graphql'\r\n\r\nexport default function PostForm() {\r\n    const {values, onChange, onSubmit} = useForm(createPostCallback, {\r\n        body: ''\r\n    }) \r\n    \r\n    const [createPost, {error}] = useMutation(CREATE_POST_MUTATION, {\r\n        variables: values,\r\n        update(proxy, result){\r\n            const data = proxy.readQuery({\r\n                query: FETCH_POST_QUERY\r\n            })\r\n            let newData = [...data.getPosts];\r\n            newData = [result.data.createPost, ...newData];\r\n            proxy.writeQuery({\r\n              query: FETCH_POST_QUERY,\r\n              data: {\r\n                ...data,\r\n                getPosts: {\r\n                  newData,\r\n                },\r\n              },\r\n            });\r\n            values.body = '';\r\n        },\r\n        onError(err) {\r\n            console.log(err);\r\n        },\r\n    })\r\n\r\n    function createPostCallback(){\r\n        createPost()\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Form onSubmit={onSubmit}>\r\n                 <h2>Create a post:</h2>\r\n                <Form.Field>\r\n                    <Form.Input\r\n                        placeholder=\"Ho Worodl\"\r\n                        name=\"body\"\r\n                        onChange={onChange}\r\n                        value={values.body}\r\n                        error={error? true : false}\r\n                    />\r\n                    <Button type=\"submit\" color=\"teal\">\r\n                        Submit\r\n                    </Button>\r\n                </Form.Field>\r\n            </Form>\r\n            {error && (\r\n            <div className=\"ui error message\" style={{marginBottom: 20}}>\r\n                <ul className=\"list\">\r\n                    <li>{error.graphQLErrors[0].message}</li>\r\n                </ul>\r\n            </div>\r\n        )}\r\n        </>\r\n    )\r\n}\r\n\r\nconst CREATE_POST_MUTATION = gql`\r\n    mutation createPost($body: String!){\r\n        createPost(body: $body){\r\n            id body createdAt username\r\n            likes {\r\n                id username createdAt\r\n            }\r\n            likeCount\r\n            comments {\r\n                id body username createdAt\r\n            }\r\n            commentCount\r\n        }\r\n    }\r\n`\r\n","import React, {useEffect, useState, useContext} from 'react'\r\nimport { Grid, Transition } from 'semantic-ui-react'\r\nimport {useQuery} from '@apollo/client'\r\n// import gql from 'graphql'\r\nimport PostCard from '../components/PostCard'\r\nimport PostForm from '../components/PostForm'\r\nimport {FETCH_POST_QUERY} from '../util/graphql'\r\n\r\nimport {AuthContext} from '../context/auth'\r\n\r\nfunction Home() {\r\n    const {user} = useContext(AuthContext)\r\n    const {loading, data} = useQuery(FETCH_POST_QUERY)\r\n    const [posts, setPosts] = useState([]);\r\n    useEffect(() => {\r\n        if (data) {\r\n          setPosts(data.getPosts);\r\n        }\r\n    },[data])\r\n\r\n    return (\r\n        <Grid columns={3}>  \r\n        <Grid.Row className=\"page-title\">\r\n            <h1>Recent posts</h1>\r\n        </Grid.Row>\r\n        <Grid.Row>\r\n            {user && (\r\n                <Grid.Column>\r\n                    <PostForm/>\r\n                </Grid.Column>\r\n            )}\r\n            {loading? (\r\n                <h1>Loading posts...</h1>\r\n            ) : (\r\n               <Transition.Group>\r\n                   {\r\n                        posts && posts.map(post => (\r\n                            <Grid.Column key={post.id} style={{marginBottom: 20}}>\r\n                                <PostCard post={post}/>\r\n                            </Grid.Column>\r\n                        ))\r\n                   }\r\n               </Transition.Group>\r\n            )}\r\n        </Grid.Row>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Home","import React, {useContext, useState} from 'react'\r\nimport {Button, Form, Input} from 'semantic-ui-react'\r\nimport {gql, useMutation} from '@apollo/client'\r\n\r\nimport {AuthContext} from '../context/auth'\r\nimport {useForm} from '../util/hooks'\r\n\r\nfunction Register(props) {\r\n    const context = useContext(AuthContext)\r\n    const [errors, setErrors] = useState({})\r\n\r\n    const {onChange, onSubmit, values} = useForm(registerUser, {\r\n        username: '',\r\n        email: '',\r\n        password: '',\r\n        confirmPassword: ''\r\n    })\r\n    \r\n    const [addUser, {loading}] = useMutation(REGISTER_USER, {\r\n        update(_, {data: {register: userData}}) {\r\n            context.login(userData)\r\n            props.history.push('/')\r\n        },\r\n        onError(err){\r\n            setErrors(err.graphQLErrors[0].extensions.exception.errors)\r\n        },\r\n        variables: values\r\n    })\r\n\r\n    function registerUser(){\r\n        addUser()\r\n    }\r\n\r\n    return (\r\n        <div className=\"form-container\">\r\n            <Form onSubmit={onSubmit} noValidate className={loading? 'loading' : ''}>\r\n                <h1>Register</h1>\r\n                <Form.Input \r\n                    label=\"Login\" \r\n                    placeholder=\"write your username\"\r\n                    name=\"username\"\r\n                    type=\"text\"\r\n                    value={values.username}\r\n                    error={errors.username ? true : false}\r\n                    onChange={onChange}\r\n                />\r\n                <Form.Input \r\n                    label=\"Email\" \r\n                    placeholder=\"write your email\"\r\n                    name=\"email\"\r\n                    type=\"email\"\r\n                    value={values.email}\r\n                    error={errors.email ? true : false}\r\n                    onChange={onChange}\r\n                />\r\n                <Form.Input \r\n                    label=\"Password\" \r\n                    placeholder=\"write your password\"\r\n                    name=\"password\"\r\n                    type=\"password\"\r\n                    value={values.password}\r\n                    error={errors.password ? true : false}\r\n                    onChange={onChange}\r\n                />\r\n                <Form.Input \r\n                    label=\"Confrim password\" \r\n                    placeholder=\"confirm your password\"\r\n                    name=\"confirmPassword\"\r\n                    type=\"password\"\r\n                    value={values.confirmPassword}\r\n                    error={errors.confirmPassword ? true : false}\r\n                    onChange={onChange}\r\n                />\r\n                <button className=\"form-button\" type=\"submit\" placeholder=\"Register\">\r\n                    Register\r\n                </button>\r\n            </Form>\r\n            {\r\n                Object.keys(errors).length > 0 && (\r\n                    <div className=\"ui error message\">\r\n                        <ul className=\"list\">\r\n                            {Object.values(errors).map((value) => (\r\n                                <li key={value}>\r\n                                    {value}\r\n                                </li>\r\n                            ))}\r\n                        </ul>\r\n                    </div>\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nconst REGISTER_USER = gql`\r\n    mutation register(\r\n        $username: String!\r\n        $email: String!\r\n        $password: String!\r\n        $confirmPassword: String!\r\n    ) {\r\n        register(\r\n            registerInput: {\r\n                username: $username\r\n                email: $email\r\n                password: $password\r\n                confirmPassword: $confirmPassword\r\n            }\r\n        ){\r\n            id email username createdAt token\r\n        }\r\n    }\r\n`\r\n\r\nexport default Register","import React, {useContext, useState} from 'react'\r\nimport {Button, Form, Input} from 'semantic-ui-react'\r\nimport {gql, useMutation} from '@apollo/client'\r\n\r\n\r\nimport {AuthContext} from '../context/auth'\r\nimport {useForm} from '../util/hooks'\r\n\r\nfunction Login(props) {\r\n    const context = useContext(AuthContext)\r\n    const [errors, setErrors] = useState({})\r\n\r\n    const {onChange, onSubmit, values} = useForm(loginUserCallback, {\r\n        username: '',\r\n        password: ''\r\n    })\r\n\r\n    const [loginUser, {loading}] = useMutation(LOGIN_USER, {\r\n        update(_, {data: {login: userData}}){\r\n            context.login(userData)\r\n            props.history.push('/')\r\n        },\r\n        onError(err){\r\n            setErrors(err.graphQLErrors[0].extensions.exception.errors)\r\n        },\r\n        variables: values\r\n    })\r\n\r\n    function loginUserCallback(){\r\n        loginUser()\r\n    }\r\n\r\n    return (\r\n        <div className=\"form-container\">\r\n            <Form onSubmit={onSubmit} noValidate className={loading? 'loading' : ''}>\r\n                <h1>Login</h1>\r\n                <Form.Input \r\n                    label=\"Login\" \r\n                    placeholder=\"write your username\"\r\n                    name=\"username\"\r\n                    type=\"text\"\r\n                    value={values.username}\r\n                    error={errors.username ? true : false}\r\n                    onChange={onChange}\r\n                />\r\n                <Form.Input \r\n                    label=\"Password\" \r\n                    placeholder=\"write your password\"\r\n                    name=\"password\"\r\n                    type=\"password\"\r\n                    value={values.password}\r\n                    error={errors.password ? true : false}\r\n                    onChange={onChange}\r\n                />\r\n                <button class=\"form-button\" type=\"submit\" placeholder=\"Register\">\r\n                    Login\r\n                </button>\r\n            </Form>\r\n            {\r\n                Object.keys(errors).length > 0 && (\r\n                    <div className=\"ui error message\">\r\n                        <ul className=\"list\">\r\n                            {Object.values(errors).map((value) => (\r\n                                <li key={value}>\r\n                                    {value}\r\n                                </li>\r\n                            ))}\r\n                        </ul>\r\n                    </div>\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nconst LOGIN_USER = gql`\r\n    mutation login(\r\n        $username: String!\r\n        $password: String!\r\n    ) {\r\n        login(\r\n                username: $username\r\n                password: $password\r\n        ){\r\n            id email username createdAt token\r\n        }\r\n    }\r\n`\r\n\r\nexport default Login","import React, {useContext, useState, useRef} from 'react'\r\nimport {gql, useMutation, useQuery} from '@apollo/client'\r\nimport moment from 'moment'\r\n\r\nimport {Button, Form, Icon, Label, Card, Grid, GridColumn, Image } from 'semantic-ui-react';\r\nimport LikeButton from '../components/LikeButton'\r\nimport {AuthContext} from '../context/auth'\r\nimport DeleteButton from '../components/DeleteButton';\r\n\r\n\r\n\r\nfunction SinglePost(props){\r\n    const postId = props.match.params.postId\r\n    const {user} = useContext(AuthContext)\r\n    const commentInputRef = useRef(null)\r\n\r\n    const [comment, setComment] = useState('')\r\n\r\n    const {data: {getPost} = {}} = useQuery(FETCH_POST_QUERY, {\r\n        variables: {\r\n            postId\r\n        }\r\n    })\r\n\r\n    const [submitComment] = useMutation(SUBMIT_COMMENT_MUTATION, {\r\n        update(){\r\n            setComment('')\r\n            commentInputRef.current.blur()\r\n        },\r\n        variables: {\r\n            postId,\r\n            body: comment\r\n        }\r\n    })\r\n\r\n    function deletePostCallback() {\r\n        props.history.push('/')\r\n    }\r\n\r\n    let singlePost\r\n    if(!getPost){\r\n        singlePost = <p>Loading...</p>\r\n    } else {\r\n        const {id, body, createdAt, username, comments, likes, likeCount, commentCount} = getPost\r\n        singlePost = (\r\n            <Grid>\r\n                <Grid.Row>\r\n                    <GridColumn width={2}>\r\n                        <Image \r\n                            src='https://react.semantic-ui.com/images/avatar/large/molly.png'\r\n                            size=\"small\"\r\n                            floated=\"right\"\r\n                        />    \r\n                    </GridColumn>\r\n                    <GridColumn width={10}>\r\n                        <Card fluid>\r\n                            <Card.Content>\r\n                                <Card.Header>\r\n                                    {username}\r\n                                </Card.Header>\r\n                                <Card.Meta>\r\n                                    {moment(createdAt).fromNow()}\r\n                                </Card.Meta>\r\n                                <Card.Description>{body}</Card.Description>\r\n                            </Card.Content>\r\n                            <hr/>\r\n                            <Card.Content extra>\r\n                                <LikeButton user={user} post = {{id, likeCount, likes}} />\r\n                                <Button as=\"div\" \r\n                                        labelPosition=\"right\"\r\n                                        onClick={()=> console.log('Comment on post')}>\r\n                                    <Button basic color=\"blue\">\r\n                                        <Icon name=\"comments\"/>\r\n                                    </Button>\r\n                                    <Label basic color=\"blue\" pointing=\"left\">\r\n                                        {commentCount}\r\n                                    </Label>\r\n                                </Button>\r\n                                {user && user.username === username && (\r\n                                    <DeleteButton postId={id} callback={deletePostCallback} />\r\n                                )}\r\n                            </Card.Content>\r\n                        </Card>\r\n                        {user && (\r\n                            <Card fluid>\r\n                                <p>Post a comment</p>\r\n                                <Form>\r\n                                    <div className=\"ui action input fluid\">\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            placeholder=\"Comment..\"\r\n                                            name={comment}\r\n                                            onChange={event => setComment(event.target.value )}\r\n                                            ref={commentInputRef}\r\n                                            />\r\n                                            <button \r\n                                            type=\"submit\" \r\n                                            className=\"ui button teal\"\r\n                                            disabled={comment.trim() === ''}\r\n                                            onClick={submitComment}\r\n                                            >Submit</button>\r\n                                    </div>\r\n                                </Form>\r\n                            </Card>\r\n                        )}\r\n                        {comments.map(comment => (\r\n                            <Card fluid key={comment.id}>\r\n                                <Card.Content>\r\n                                    {user && user.username === comment.username && (\r\n                                        <DeleteButton postId={id} commentId={comment.id}/>\r\n                                    )}\r\n                                    <Card.Header>\r\n                                        {comment.username}\r\n                                    </Card.Header>\r\n                                    <Card.Meta>\r\n                                        {moment(comment.createdAt).fromNow()}\r\n                                    </Card.Meta>\r\n                                    <Card.Description>\r\n                                        {comment.body}\r\n                                    </Card.Description>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        ))}\r\n                    </GridColumn>\r\n                </Grid.Row>\r\n            </Grid>\r\n        )\r\n    }\r\n    return singlePost\r\n}\r\n\r\nconst SUBMIT_COMMENT_MUTATION = gql`\r\n    mutation($postId: String!, $body: String!){\r\n        createComment(postId: $postId, body: $body){\r\n            id\r\n            comments{\r\n                id body createdAt username\r\n            }\r\n            commentCount\r\n        }\r\n    }\r\n`\r\n\r\nconst FETCH_POST_QUERY = gql`\r\n    query($postId: ID!){\r\n        getPost(postId: $postId){\r\n            id \r\n            body \r\n            createdAt \r\n            username \r\n            likeCount\r\n            likes{\r\n                username\r\n            }\r\n            commentCount\r\n            comments{\r\n                id username createdAt body\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport default SinglePost","import React from 'react'\nimport {BrowserRouter as Router, Route} from 'react-router-dom'\nimport './App.css';\nimport { Container } from 'semantic-ui-react'\n\nimport {AuthProvider} from './context/auth'\nimport AuthRoute from './util/AuthRoute'\n\nimport 'semantic-ui-css/semantic.min.css'\nimport MenuBar from './components/Menu'\nimport Home from './pages/Home'\nimport Register from './pages/Register'\nimport Login from './pages/Login'\nimport SinglePost from './pages/SinglePost'\n\nfunction App() {\n  return (\n    <AuthProvider>\n        <Router>\n          <Container>\n            <MenuBar />\n            <Route exact path='/' component={Home}/>\n            <AuthRoute exact path='/login' component={Login}/>\n            <AuthRoute exact path='/register' component={Register}/>\n            <Route exact path=\"/posts/:postId\" component={SinglePost}/>\n          </Container>\n        </Router>\n    </AuthProvider>\n  );\n}\n\nexport default App;\n","import React from 'react'\r\nimport App from './App'\r\nimport {ApolloClient, ApolloProvider, createHttpLink, InMemoryCache} from '@apollo/client'\r\nimport { setContext } from \"apollo-link-context\"\r\n\r\nconst httpLink = createHttpLink({\r\n  uri: \"https://nameless-beyond-69969.herokuapp.com\"\r\n})\r\n\r\nconst authLink = setContext(() => {\r\n  const token = localStorage.getItem('jwtToken')\r\n  return{\r\n    headers: {\r\n      Authorization: token? `Bearer ${token}` : ''\r\n    }\r\n  }\r\n})\r\n\r\nconst client = new ApolloClient({\r\n    link: authLink.concat(httpLink),\r\n    cache: new InMemoryCache()\r\n  });\r\n\r\n  export default (\r\n    <ApolloProvider client={client}>\r\n      <App />\r\n    </ApolloProvider>\r\n  );","import ReactDOM from 'react-dom'\nimport reportWebVitals from './reportWebVitals';\nimport ApolloProvider from './ApolloProvider'\nimport './index.css'\n\nReactDOM.render(\n ApolloProvider,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}